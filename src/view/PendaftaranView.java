/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import config.Koneksi;
import controller.PendaftaranController;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.AbstractTableModel;
import main.App;
import model.Mapel;
import model.Pendaftaran;
import model.Pengajar;
import model.Siswa;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;





/**
 *
 * @author anzt0
 */
public class PendaftaranView extends javax.swing.JInternalFrame {

    private final Pendaftaran pendaftaran;
    private Mapel mapel;
    private Pengajar pengajar;
    private Siswa siswa;
    private List<Pendaftaran> listPendaftaran;
    private final PendaftaranController pendaftaranController;
    
    /**
     * Creates new form ProdukView
     */
    public PendaftaranView() {
        initComponents();
        pendaftaran = new Pendaftaran();
        siswa = new Siswa();
        mapel = new Mapel();
        pengajar = new Pengajar();
        pendaftaranController = new PendaftaranController(this);
        pendaftaranController.loadSatuan();
        refreshTable();
        
    }

    public JComboBox<String> getComboMapel() {
        return comboMapel;
    }

    public JComboBox<String> getComboPengajar() {
        return comboPengajar;
    }

    public JComboBox<String> getComboSiswa() {
        return comboSiswa;
    }

    public JRadioButton getjRadioBelumLunas() {
        return jRadioBelumLunas;
    }

    public JRadioButton getjRadioLunas() {
        return jRadioLunas;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public JTable getTabelPendaftaran() {
        return tabelPendaftaran;
    }

    public JButton getTombolBaru() {
        return tombolBaru;
    }

    public JButton getTombolHapus() {
        return tombolHapus;
    }

    public JButton getTombolSimpan() {
        return tombolSimpan;
    }

    public JButton getTombolUbah() {
        return tombolUbah;
    }
    


    
private void refreshTable() {
    try {
        listPendaftaran = App.masterService.getAllPendaftaran(); // Memanggil service

        if (listPendaftaran == null || listPendaftaran.isEmpty()) {
            System.out.println("List pendaftaran kosong atau null!");
        } else {
            System.out.println("Data berhasil dimuat: " + listPendaftaran.size());
        }

        tabelPendaftaran.setModel(new ProdukTableModel(listPendaftaran));
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null,
            "Terjadi kesalahan saat memuat tabel: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}


    private void initListener(){
        tabelPendaftaran.getSelectionModel().addListSelectionListener((ListSelectionEvent lse) -> {
            pendaftaranController.loadData(pendaftaran, listPendaftaran);
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboMapel = new javax.swing.JComboBox<>();
        comboSiswa = new javax.swing.JComboBox<>();
        comboPengajar = new javax.swing.JComboBox<>();
        jRadioBelumLunas = new javax.swing.JRadioButton();
        jRadioLunas = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        tombolHapus = new javax.swing.JButton();
        tombolUbah = new javax.swing.JButton();
        tombolSimpan = new javax.swing.JButton();
        tombolBaru = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelPendaftaran = new javax.swing.JTable();
        tombolCetak = new javax.swing.JButton();

        setClosable(true);
        setTitle("Form Input Pendaftaran Siswa");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel2.setText("Nama");

        jLabel3.setText("Mapel");

        jLabel4.setText("Pengajar");

        jRadioBelumLunas.setText("Belum Lunas");
        jRadioBelumLunas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioBelumLunasActionPerformed(evt);
            }
        });

        jRadioLunas.setText("Lunas");
        jRadioLunas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioLunasActionPerformed(evt);
            }
        });

        jLabel7.setText("Status Pembayaran");

        tombolHapus.setText("Hapus");
        tombolHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolHapusActionPerformed(evt);
            }
        });

        tombolUbah.setText("Ubah");
        tombolUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolUbahActionPerformed(evt);
            }
        });

        tombolSimpan.setText("Simpan");
        tombolSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolSimpanActionPerformed(evt);
            }
        });

        tombolBaru.setText("Baru");
        tombolBaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolBaruActionPerformed(evt);
            }
        });

        tabelPendaftaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelPendaftaran);

        tombolCetak.setText("Cetak");
        tombolCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolCetakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tombolBaru)
                        .addGap(31, 31, 31)
                        .addComponent(tombolSimpan)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboMapel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSiswa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPengajar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioLunas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioBelumLunas))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(tombolUbah)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tombolHapus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tombolCetak)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboSiswa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboMapel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboPengajar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioLunas)
                    .addComponent(jRadioBelumLunas, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tombolBaru)
                    .addComponent(tombolSimpan)
                    .addComponent(tombolUbah)
                    .addComponent(tombolHapus)
                    .addComponent(tombolCetak))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        App.menuView.pendaftaranview = null;
    }//GEN-LAST:event_formInternalFrameClosed

    private void tombolBaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolBaruActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tombolBaruActionPerformed

    private void tombolSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolSimpanActionPerformed
    try {
      
        if (comboSiswa.getSelectedItem() == null || 
            comboMapel.getSelectedItem() == null || 
            comboPengajar.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ambil data dari combobox
        siswa = App.masterService.getByNameSiswa(comboSiswa.getSelectedItem().toString());
        mapel = App.masterService.getByNameMapel(comboMapel.getSelectedItem().toString());
        pengajar = App.masterService.getByNamePengajar(comboPengajar.getSelectedItem().toString());

        // Validasi objek tidak null
        if (siswa == null || mapel == null || pengajar == null) {
            JOptionPane.showMessageDialog(this, "Data tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        pendaftaran.setStatus_pembayaran(jRadioBelumLunas.isSelected() ? "Belum Lunas" : "Lunas");
        pendaftaran.setSiswa(siswa);
        pendaftaran.setMapel(mapel);
        pendaftaran.setPengajar(pengajar);
        App.masterService.simpanPendaftaran(pendaftaran);
        refreshTable();
        resetForm();
        
        JOptionPane.showMessageDialog(this, "Data berhasil disimpan!", "Informasi", JOptionPane.INFORMATION_MESSAGE);

    } catch (HeadlessException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Method untuk reset form
private void resetForm() {
    comboSiswa.setSelectedIndex(0);
    comboMapel.setSelectedIndex(0);
    comboPengajar.setSelectedIndex(0);
    jRadioBelumLunas.setSelected(true);
    }//GEN-LAST:event_tombolSimpanActionPerformed

    private void jRadioBelumLunasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioBelumLunasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioBelumLunasActionPerformed

    private void jRadioLunasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioLunasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioLunasActionPerformed

    private void tombolUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolUbahActionPerformed
     try {
    // Validasi jika field combo box kosong
    if (comboSiswa.getSelectedItem() == null || 
        comboMapel.getSelectedItem() == null || 
        comboPengajar.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Ambil data dari combobox
    siswa = App.masterService.getByNameSiswa(comboSiswa.getSelectedItem().toString());
    mapel = App.masterService.getByNameMapel(comboMapel.getSelectedItem().toString());
    pengajar = App.masterService.getByNamePengajar(comboPengajar.getSelectedItem().toString());

    // Validasi objek tidak null
    if (siswa == null || mapel == null || pengajar == null) {
        JOptionPane.showMessageDialog(this, "Data tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Update data pendaftaran
    pendaftaran.setStatus_pembayaran(jRadioBelumLunas.isSelected() ? "Belum Lunas" : "Lunas");
    pendaftaran.setSiswa(siswa);
    pendaftaran.setMapel(mapel);
    pendaftaran.setPengajar(pengajar);

    // Update ke database
    App.masterService.ubahPendaftaran(pendaftaran);

    // Refresh tabel dan reset form
    refreshTable();
    resetForm();

    JOptionPane.showMessageDialog(this, "Data berhasil diubah!", "Informasi", JOptionPane.INFORMATION_MESSAGE);

} catch (HeadlessException e) {
    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

        
    }//GEN-LAST:event_tombolUbahActionPerformed

    private void tombolHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolHapusActionPerformed
        try {
    // Validasi jika tidak ada data yang dipilih
    int selectedRow = tabelPendaftaran.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Konfirmasi sebelum menghapus
    int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    Pendaftaran pendaftaran = listPendaftaran.get(selectedRow);

    // Hapus data dari database
    App.masterService.hapusPendaftaran(pendaftaran);

    // Refresh tabel setelah penghapusan
    refreshTable();
    resetForm();

    JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Informasi", JOptionPane.INFORMATION_MESSAGE);

} catch (HeadlessException e) {
    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_tombolHapusActionPerformed

    private void tombolCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolCetakActionPerformed
try{
            Koneksi koneksi = new Koneksi();
            JasperPrint jp = JasperFillManager.fillReport(getClass().getResourceAsStream("/Laporan/LaporanPendaftaran.jasper"), null, koneksi.getConnection());
            JasperViewer.viewReport(jp, false);
        }
        catch (JRException ex ) {
            Logger.getLogger(PendaftaranView.class.getName()).log(Level.SEVERE,null, ex);
            
        }

    }//GEN-LAST:event_tombolCetakActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboMapel;
    private javax.swing.JComboBox<String> comboPengajar;
    private javax.swing.JComboBox<String> comboSiswa;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioBelumLunas;
    private javax.swing.JRadioButton jRadioLunas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelPendaftaran;
    private javax.swing.JButton tombolBaru;
    private javax.swing.JButton tombolCetak;
    private javax.swing.JButton tombolHapus;
    private javax.swing.JButton tombolSimpan;
    private javax.swing.JButton tombolUbah;
    // End of variables declaration//GEN-END:variables
public class ProdukTableModel extends AbstractTableModel {

    private List<Pendaftaran> listPendaftaran;
    private final String HEADER[] = {"ID", "NAMA MAPEL", "NAMA SISWA", "NAMA PENGAJAR","Biaya", "STATUS PEMBAYARAN"};

    // Constructor untuk menerima data
    public ProdukTableModel(List<Pendaftaran> listPendaftaran) {
        // Pastikan list tidak null
        this.listPendaftaran = listPendaftaran != null ? listPendaftaran : new ArrayList<>();
    }

    @Override
    public int getRowCount() {
        return listPendaftaran.size();
    }

    @Override
    public int getColumnCount() {
        return HEADER.length;
    }

    @Override
    public String getColumnName(int i) {
        return HEADER[i];
    }

    @Override
    public Object getValueAt(int i, int i1) {
        Pendaftaran p = listPendaftaran.get(i);
        switch (i1) {
            case 0:
                return p.getId();
            case 1:
                return (p.getMapel() != null) ? p.getMapel().getNama_mapel() : "Tidak ada mapel";
            case 2:
                return (p.getSiswa() != null) ? p.getSiswa().getNama_siswa() : "Tidak ada siswa";
            case 3:
                return (p.getPengajar() != null) ? p.getPengajar().getNama_pengajar() : "Tidak ada pengajar";
            case 4:
                return (p.getMapel() != null) ? p.getMapel().getBiaya() : "Belum Isi";
                   case 5:
                return p.getStatus_pembayaran();
                
            default:
                return null;
        }
    }
}

}

